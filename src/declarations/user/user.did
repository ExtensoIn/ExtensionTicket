type Vec = 
 vec
  record {
    text;
    variant {
      BlobContent: vec nat8;
      BoolContent: bool;
      FloatContent: float64;
      Int16Content: int16;
      Int32Content: int32;
      Int64Content: int64;
      Int8Content: int8;
      IntContent: int;
      Nat16Content: nat16;
      Nat32Content: nat32;
      Nat64Content: nat64;
      Nat8Content: nat8;
      NatContent: nat;
      NestedContent: Vec;
      Principal: principal;
      TextContent: text;
    };
  };
type User__1 = 
 record {
   email: text;
   jointEvents: vec nat;
   name: text;
   nftId: opt vec nat;
   password: opt text;
 };
type UserRegister = 
 record {
   email: text;
   name: text;
   password: opt text;
 };
type UserError = 
 variant {
   Other: text;
   UnauthorizedOwner;
   UnauthorizedUser;
   UserAlreadyExists;
   UserNotFound;
 };
type User = 
 service {
   addCustodian: (principal) -> (Result);
   login: () -> (Result_1) query;
   loginByEmail: (text, text) -> (Result_1) query;
   register: (UserRegister) -> (Result_1);
   registerByEmail: (UserRegister) -> (Result_1);
   registerToEventEmail: (text, text, text, EventId,
    vec record {
          text;
          GenericValue;
        }) -> (Result);
   registerToEventPrincipal: (text, EventId,
    vec record {
          text;
          GenericValue;
        }) -> (Result);
 };
type Result_1 = 
 variant {
   err: UserError;
   ok: User__1;
 };
type Result = 
 variant {
   err: UserError;
   ok;
 };
type InitArgs = record {custodians: vec principal;};
type GenericValue = 
 variant {
   BlobContent: vec nat8;
   BoolContent: bool;
   FloatContent: float64;
   Int16Content: int16;
   Int32Content: int32;
   Int64Content: int64;
   Int8Content: int8;
   IntContent: int;
   Nat16Content: nat16;
   Nat32Content: nat32;
   Nat64Content: nat64;
   Nat8Content: nat8;
   NatContent: nat;
   NestedContent: Vec;
   Principal: principal;
   TextContent: text;
 };
type EventId = nat;
service : (InitArgs) -> User
