type Vec = 
 vec
  record {
    text;
    variant {
      BlobContent: vec nat8;
      BoolContent: bool;
      FloatContent: float64;
      Int16Content: int16;
      Int32Content: int32;
      Int64Content: int64;
      Int8Content: int8;
      IntContent: int;
      Nat16Content: nat16;
      Nat32Content: nat32;
      Nat64Content: nat64;
      Nat8Content: nat8;
      NatContent: nat;
      NestedContent: Vec;
      Principal: principal;
      TextContent: text;
    };
  };
type TxEvent = 
 record {
   caller: principal;
   details: vec record {
                  text;
                  GenericValue;
                };
   operation: text;
   time: nat64;
 };
type TokenMetadata = 
 record {
   approved_at: opt nat64;
   approved_by: opt principal;
   burned_at: opt nat64;
   burned_by: opt principal;
   is_burned: bool;
   minted_at: nat64;
   minted_by: principal;
   operator: opt principal;
   owner: opt principal;
   properties: vec record {
                     text;
                     GenericValue;
                   };
   token_identifier: nat;
   transferred_at: opt nat64;
   transferred_by: opt principal;
 };
type SupportedInterface = 
 variant {
   Approval;
   Burn;
   Mint;
   TransactionHistory;
 };
type Stats = 
 record {
   cycles: nat;
   total_supply: nat;
   total_transactions: nat;
   total_unique_holders: nat;
 };
type Result_6 = 
 variant {
   err: NftError;
   ok: bool;
 };
type Result_5 = 
 variant {
   err: NftError;
   ok: opt principal;
 };
type Result_4 = 
 variant {
   err: NftError;
   ok: vec nat;
 };
type Result_3 = 
 variant {
   err: NftError;
   ok: vec TokenMetadata;
 };
type Result_2 = 
 variant {
   err: NftError;
   ok: TokenMetadata;
 };
type Result_1 = 
 variant {
   err: NftError;
   ok: TxEvent;
 };
type Result = 
 variant {
   err: NftError;
   ok: nat;
 };
type NftError = 
 variant {
   ExistedNFT;
   OperatorNotFound;
   Other: text;
   OwnerNotFound;
   SelfApprove;
   SelfTransfer;
   TokenNotFound;
   TxNotFound;
   UnauthorizedOperator;
   UnauthorizedOwner;
 };
type Metadata__1 = 
 record {
   created_at: nat64;
   custodians: vec principal;
   logo: opt text;
   name: opt text;
   symbol: opt text;
   upgraded_at: nat64;
 };
type Metadata = 
 record {
   created_at: nat64;
   custodians: vec principal;
   logo: opt text;
   name: opt text;
   symbol: opt text;
   upgraded_at: nat64;
 };
type GenericValue__1 = 
 variant {
   BlobContent: vec nat8;
   BoolContent: bool;
   FloatContent: float64;
   Int16Content: int16;
   Int32Content: int32;
   Int64Content: int64;
   Int8Content: int8;
   IntContent: int;
   Nat16Content: nat16;
   Nat32Content: nat32;
   Nat64Content: nat64;
   Nat8Content: nat8;
   NatContent: nat;
   NestedContent: Vec;
   Principal: principal;
   TextContent: text;
 };
type GenericValue = 
 variant {
   BlobContent: vec nat8;
   BoolContent: bool;
   FloatContent: float64;
   Int16Content: int16;
   Int32Content: int32;
   Int64Content: int64;
   Int8Content: int8;
   IntContent: int;
   Nat16Content: nat16;
   Nat32Content: nat32;
   Nat64Content: nat64;
   Nat8Content: nat8;
   NatContent: nat;
   NestedContent: Vec;
   Principal: principal;
   TextContent: text;
 };
type Dip721NFT = 
 service {
   approve: (principal, nat) -> (Result);
   balanceOf: (principal) -> (Result) query;
   burn: (nat) -> (Result);
   custodians: () -> (vec principal) query;
   cycles: () -> (nat) query;
   isApprovedForAll: (principal, principal) -> (Result_6) query;
   logo: () -> (opt text) query;
   metadata: () -> (Metadata__1) query;
   mint: (principal, nat, vec record {
                                text;
                                GenericValue__1;
                              }) -> (Result);
   name: () -> (opt text) query;
   operatorOf: (nat) -> (Result_5) query;
   operatorTokenIdentifiers: (principal) -> (Result_4) query;
   operatorTokenMetadata: (principal) -> (Result_3) query;
   ownerOf: (nat) -> (Result_5) query;
   ownerTokenIdentifiers: (principal) -> (Result_4) query;
   ownerTokenMetadata: (principal) -> (Result_3) query;
   setApprovalForAll: (principal, bool) -> (Result);
   setCustodians: (vec principal) -> () oneway;
   setLogo: (text) -> () oneway;
   setName: (text) -> () oneway;
   setSymbol: (text) -> () oneway;
   stats: () -> (Stats) query;
   supportedInterfaces: () -> (vec SupportedInterface) query;
   symbol: () -> (opt text) query;
   tokenMetadata: (nat) -> (Result_2) query;
   totalSupply: () -> (nat) query;
   totalTransactions: () -> (nat) query;
   totalUniqueHolders: () -> (nat) query;
   transaction: (nat) -> (Result_1) query;
   transfer: (principal, nat) -> (Result);
   transferFrom: (principal, principal, nat) -> (Result);
 };
service : (Metadata) -> Dip721NFT
