type EventId = nat;
type GenericValue = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  BoolContent : bool;
  Nat8Content : nat8;
  Int64Content : int64;
  IntContent : int;
  NatContent : nat;
  Nat16Content : nat16;
  Int32Content : int32;
  Int8Content : int8;
  FloatContent : float64;
  Int16Content : int16;
  BlobContent : vec nat8;
  NestedContent : Vec;
  Principal : principal;
  TextContent : text;
};
type InitArgs = record { custodians : vec principal };
type Result = variant { ok; err : UserError };
type Result_1 = variant { ok : User__1; err : UserError };
type User = service {
  addCustodian : (principal) -> (Result);
  login : () -> (Result_1) query;
  loginByEmail : (text, text) -> (Result_1) query;
  register : (UserRegister) -> (Result_1);
  registerByEmail : (UserRegister) -> (Result_1);
  registerToEventEmail : (
      text,
      text,
      text,
      EventId,
      vec record { text; GenericValue },
    ) -> (Result);
  registerToEventPrincipal : (
      text,
      EventId,
      vec record { text; GenericValue },
    ) -> (Result);
};
type UserError = variant {
  UserAlreadyExists;
  UnauthorizedOwner;
  UnauthorizedUser;
  Other : text;
  UserNotFound;
};
type UserRegister = record { password : opt text; name : text; email : text };
type User__1 = record {
  password : opt text;
  name : text;
  email : text;
  jointEvents : vec nat;
  nftId : opt vec nat;
};
type Vec = vec record {
  text;
  variant {
    Nat64Content : nat64;
    Nat32Content : nat32;
    BoolContent : bool;
    Nat8Content : nat8;
    Int64Content : int64;
    IntContent : int;
    NatContent : nat;
    Nat16Content : nat16;
    Int32Content : int32;
    Int8Content : int8;
    FloatContent : float64;
    Int16Content : int16;
    BlobContent : vec nat8;
    NestedContent : Vec;
    Principal : principal;
    TextContent : text;
  };
};
service : (InitArgs) -> User