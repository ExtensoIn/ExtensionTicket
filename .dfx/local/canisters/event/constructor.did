type Event = service {
  addCustodian : (principal) -> (Result_1);
  addEvent : (EventId, Event__1) -> (Result);
  addEventByEmail : (text, Event__1, EventId) -> (Result);
};
type EventError = variant { UnauthorizedOwner; EventNotFound };
type EventId = nat;
type Event__1 = record {
  status : Status;
  participants : vec principal;
  endDate : Time;
  name : text;
  description : text;
  ticketsAmount : nat;
  participantsEmail : vec text;
  createdByPrincipal : opt principal;
  place : text;
  createdByEmail : opt text;
  startDate : Time;
};
type InitArgs = record { custodians : vec principal };
type Result = variant { ok : Event__1; err : EventError };
type Result_1 = variant { ok; err : EventError };
type Status = variant { Finished; InProgress; Canceled };
type Time = int;
service : (InitArgs) -> Event